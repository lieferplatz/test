#!groovy

buildscript {

    repositories {
        mavenLocal()
        mavenCentral()
//        jcenter()
        maven { url 'http://repo.spring.io/libs-release' }
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    ext {
        springbootVersion = '1.5.2.RELEASE'
        gradleDockerPluginVersion = '3.0.6'
        gradleGitPluginVersion = '1.3.0'
        gradleGitPropertiesPluginVersion = '1.4.16'
        dependencyManagementPluginVersion = '0.6.0.RELEASE'
        springfoxVersion = '2.6.1'
        springbootAdminVersion = '1.4.6'
        springIoPlatformVersion = '2.0.8.RELEASE'
        newrelicVersion = '3.30.1'
        awsSdkVersion = '1.10.61'
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springbootVersion"
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath "org.ajoberstar:gradle-git:$gradleGitPluginVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$dependencyManagementPluginVersion"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:$gradleGitPropertiesPluginVersion"
        classpath 'com.ofg:uptodate-gradle-plugin:1.6.2'
        classpath 'org.standardout:gradle-versioneye-plugin:1.0.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.owasp:dependency-check-gradle:1.4.2'
    }
}

apply plugin: 'org.ajoberstar.grgit'

import org.ajoberstar.grgit.Grgit
import groovy.json.JsonBuilder

import java.text.SimpleDateFormat

version     = '0.0.1.BUILD-SNAPSHOT'
group       = 'de.lieferplatz'
description = 'lieferplatz micro-services'

repositories {
    mavenLocal()
    mavenCentral()
//    jcenter()
}

configure(allprojects) { project ->

    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-idea'

    task wrapper(type: Wrapper) {
        gradleVersion = '3.3'
    }
}

configure(subprojects) { project ->

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply from: "$rootDir/gradle/additional-artifacts.gradle"

    repositories {

        mavenLocal()
        mavenCentral()
//        jcenter()

    }

    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
    }

    configurations {
        all*.exclude group: 'log4j', module: 'log4j'
    }
    configurations {
        provided.all*.exclude group: 'javax.servlet'
    }

    dependencyManagement {

        applyMavenExclusions false

        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR5'
            mavenBom "io.spring.platform:platform-bom:$springIoPlatformVersion"
        }
        dependencies {
            dependencySet(group: 'io.springfox', version: springfoxVersion) {
                entry 'springfox-core'
                entry 'springfox-swagger2'
                entry 'springfox-swagger-ui'
                entry 'springfox-bean-validators'
            }
            dependencySet(group: 'org.springframework.boot', version: springbootVersion) {
                entry 'spring-boot-configuration-processor'
                entry 'spring-boot-starter-integration'
                entry 'spring-boot-autoconfigure'
                entry 'spring-boot-starter-data-jpa'
                entry 'spring-boot-starter'
                entry 'spring-boot-starter-test'
                entry 'spring-boot'
            }
            dependency 'org.easytesting:fest-assert-core:2.0M10'
            dependency 'com.google.guava:guava:19.0'
            dependency 'io.swagger:swagger-annotations:1.5.12'
        }
    }

    ext {
        moduleVersion = [

                //core
                'proxy'                 : '0.0.1.BUILD-SNAPSHOT',
                'model'                 : '0.0.1.BUILD-SNAPSHOT',
                'registry'              : '0.0.1.BUILD-SNAPSHOT',
                'mandants'              : '0.0.1.BUILD-SNAPSHOT',
                'products'              : '0.0.1.BUILD-SNAPSHOT',

        ]
        gitRepo = Grgit.open(dir: rootProject.projectDir)
        sdf = new SimpleDateFormat(iso_8601_date_format)
    }

    dependencies {

        compile 'org.projectlombok:lombok'

        compile 'org.slf4j:slf4j-api'
        compile 'com.google.guava:guava'
        compile 'org.apache.commons:commons-lang3'

        compile 'org.apache.commons:commons-math3:3.6'
        compile 'org.easytesting:fest-assert-core'
        testCompile 'org.springframework.boot:spring-boot-starter-test'

    }

    [compileJava, compileTestJava].each() {

//        it.options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation", "-Xlint:-options"]
        it.options.compilerArgs += ["-Xlint:all"] //        http://www.javaworld.com/article/2073587/javac-s--xlint-options.html + http://wiki.netbeans.org/Java_Hints#Standard_Javac_warnings

        it.options.encoding = "UTF-8"
    }

    compileJava.dependsOn processResources

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    task ([description: 'print dependency management details', group: 'Help'], 'printManagedDeps') << {
        println new JsonBuilder( dependencyManagement.managedVersions ).toPrettyString()
    }

    test {
        testLogging {
            // Show that tests are run in the command-line output
            events 'started', 'passed'

            // At a test failure, log the stack trace to the console so that we don't
            // have to open the HTML in a browser.
            exceptionFormat = 'full'
            showExceptions true
            showCauses true
            showStackTraces true
        }
    }

    idea {
        module {
            downloadJavadoc = false
            downloadSources = true
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/") //for spring-loaded
            testOutputDir = file("$buildDir/idea/classes/test/")
            iml {
                beforeMerged { module ->
                    module.dependencies.clear()
                }
            }
        }
    }
}

idea {
    project {
        languageLevel = JavaVersion.VERSION_1_8.getName()
        ipr {
            withXml { provider ->
                provider.node.component.find { it.@name == "VcsDirectoryMappings" }.mapping.@vcs = 'Git'
                provider.node.component.find {
                    it.@name == "ProjectRootManager"
                }.output.@url = "file://\$PROJECT_DIR\$/build"
                // set gradle home
                def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
                gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])
            }
        }
    }
}

